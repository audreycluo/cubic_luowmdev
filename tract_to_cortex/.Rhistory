library(cowplot)
library(data.table)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(grid)
library(gridExtra)
library(gratia)
library(ggseg)
library(ggsegGlasser)
library(kableExtra)
library(mgcv)
library(RColorBrewer)
library(stringr)
library(tidyr)
library(rjson)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, include = TRUE)
font_size <- 14
theme_set(theme_classic(base_family = "sans",base_size = font_size))
line_size <- 1
point_size <- 2
proj_root <- "/cbica/projects/luo_wm_dev/"
#input_root <- "/cbica/projects/luo_wm_dev/input"
#output_root <- "/cbica/projects/luo_wm_dev/output"
dataset <- "HCPD"
config_file <- sprintf("%1$s/code/tract_profiles/config/config_%2$s.json", proj_root, dataset)
config <- fromJSON(paste(readLines(config_file), collapse=""))
vol_to_surf_dir <- paste0(config$data_root, "/derivatives/", dataset, "_vol_to_surf")
group_dir <- paste0(vol_to_surf_dir, "/group")
# load glasser maps for each tract
glasser_csvs <- list.files(path = group_dir, pattern = "csv", full.names = T)
tract_names <- lapply(glasser_csvs, function(path) {
filename <- basename(path)
sub("_glasser.csv", "", filename)
})
tract_names <- unlist(tract_names)
glasser_maps <- lapply(glasser_csvs, read.csv)
names(glasser_maps) <- tract_names
glasser_maps$ARCL
# load glasser labels
glasser_labels <- read.csv("/cbica/projects/luo_wm_dev/atlases/glasser/HCP-MMP1_UniqueRegionList.csv")
lapply(glasser_maps, merge, by = "region")
glasser_maps
lapply(glasser_maps, merge, by = "region")
lapply(glasser_maps, merge, y = glasser_labels, by = "region")
glasser_labels
# load glasser maps for each tract
glasser_csvs <- list.files(path = group_dir, pattern = "csv", full.names = T)
tract_names <- lapply(glasser_csvs, function(path) {
filename <- basename(path)
sub("_glasser.csv", "", filename)
})
tract_names <- unlist(tract_names)
glasser_maps <- lapply(glasser_csvs, read.csv)
names(glasser_maps) <- tract_names
glasser_maps$ARCL
# load glasser labels
glasser_labels <- read.csv("/cbica/projects/luo_wm_dev/atlases/glasser/HCP-MMP1_UniqueRegionList.csv")
lapply(glasser_maps, merge, y = glasser_labels, by = "regionID")
glasser_maps
glasser_labels$regionID
glasser_labels
glasser_labels$regionID <- c(1:360)
lapply(glasser_maps, merge, y = glasser_labels, by = "regionID")
glasser_maps <- lapply(glasser_maps, merge, y = glasser_labels, by = "regionID")
glasser_maps
glasser_maps$ATRL
ggplot() + geom_brain(data=glasser_maps$ARCR, atlas= glasser,
mapping=aes(fill=probability),
show.legend=TRUE,
hemi = "right") +
theme_void()
config_file <- sprintf("%1$s/code/tract_profiles/colormaps/aquamarine.json", proj_root, dataset)
colormap_file <- sprintf("%1$s/code/tract_profiles/colormaps/aquamarine.json", proj_root, dataset)
colormap_file
colormap_file <- sprintf("%1$s/code/tract_profiles/colormaps/aquamarine.json", proj_root, dataset)
colormap <- fromJSON(paste(readLines(colormap_file), collapse=""))
colormap
mycolors <- colorRampPalette(colormap)(12)
mycolors
mycolors <- colorRampPalette(colormap)(15)
mycolors
aquamarine <- colorRampPalette(colormap)(15)
ggplot() + geom_brain(data=glasser_maps$ARCR, atlas= glasser,
mapping=aes(fill=probability),
show.legend=TRUE,
hemi = "right") + scale_fill_manual(values = aquamarine) +
theme_void()
aquamarine
ggplot() + geom_brain(data=glasser_maps$ARCR, atlas= glasser,
mapping=aes(fill=probability),
show.legend=TRUE,
hemi = "right") + scale_fill_gradientn(colors = aquamarine(15)) +
theme_void()
ggplot() + geom_brain(data=glasser_maps$ARCR, atlas= glasser,
mapping=aes(fill=probability),
show.legend=TRUE,
hemi = "right") + scale_fill_gradientn(colors = aquamarine) +
theme_void()
glasser_maps$ARCR
glasser_maps$ARCR <- glasser_maps$ARCR %>%
mutate(probability = na_if(probability, 0))
glasser_maps$ARCR
ggplot() + geom_brain(data=glasser_maps$ARCR, atlas= glasser,
mapping=aes(fill=probability),
show.legend=TRUE,
hemi = "right") + scale_fill_gradientn(colors = aquamarine, na.value = "grey50") +
theme_void()
ggplot() + geom_brain(data=glasser_maps$ARCR, atlas= glasser,
mapping=aes(fill=probability),
show.legend=TRUE,
hemi = "right") + scale_fill_gradientn(colors = aquamarine, na.value = "grey99") +
theme_void()
ggplot() + geom_brain(data=glasser_maps$ARCR, atlas= glasser,
mapping=aes(fill=probability),
show.legend=TRUE,
hemi = "right") + scale_fill_gradientn(colors = aquamarine, na.value = "grey70") +
theme_void()
ggplot() + geom_brain(data=glasser_maps$ARCR, atlas= glasser,
mapping=aes(fill=probability),
show.legend=TRUE,
hemi = "right") + scale_fill_gradientn(colors = aquamarine, na.value = "grey80") +
theme_void()
glasser_maps$ARCR <- glasser_maps$ARCR %>%
mutate(a = ifelse(probability < 0.3, NA, probability))
ggplot() + geom_brain(data=glasser_maps$ARCR, atlas= glasser,
mapping=aes(fill=probability),
show.legend=TRUE,
hemi = "right") + scale_fill_gradientn(colors = aquamarine, na.value = "grey80") +
theme_void()
glasser_maps$ARCR
glasser_maps <- lapply(glasser_maps, merge, y = glasser_labels, by = "regionID")
glasser_maps$ARCR %>%
mutate(a = ifelse(probability < 0.3, NA, probability))
glasser_maps$ARCR <- glasser_maps$ARCR %>%
mutate(probability = ifelse(probability < 0.3, NA, probability))
ggplot() + geom_brain(data=glasser_maps$ARCR, atlas= glasser,
mapping=aes(fill=probability),
show.legend=TRUE,
hemi = "right") + scale_fill_gradientn(colors = aquamarine, na.value = "grey80") +
theme_void()
glasser_maps <- lapply(glasser_maps, merge, y = glasser_labels, by = "regionID")
glasser_maps$ARCR %>%
mutate(thresh_probability = ifelse(probability < 0.3, NA, probability))
ggplot() + geom_brain(data=glasser_maps$ARCR, atlas= glasser,
mapping=aes(fill=probability),
show.legend=TRUE,
hemi = "right") + scale_fill_gradientn(colors = aquamarine, na.value = "grey80") +
theme_void()
glasser_maps <- lapply(glasser_maps, merge, y = glasser_labels, by = "regionID")
glasser_maps <- lapply(glasser_csvs, read.csv)
names(glasser_maps) <- tract_names
# load glasser labels
glasser_labels <- read.csv("/cbica/projects/luo_wm_dev/atlases/glasser/HCP-MMP1_UniqueRegionList.csv")
glasser_labels$regionID <- c(1:360)
glasser_maps <- lapply(glasser_maps, merge, y = glasser_labels, by = "regionID")
glasser_maps$ARCR <- glasser_maps$ARCR %>%
mutate(thresh_probability = ifelse(probability < 0.3, NA, probability))
ggplot() + geom_brain(data=glasser_maps$ARCR, atlas= glasser,
mapping=aes(fill=thresh_probability),
show.legend=TRUE,
hemi = "right") + scale_fill_gradientn(colors = aquamarine, na.value = "grey80") +
theme_void()
ggplot() + geom_brain(data=glasser_maps$ARCR, atlas= glasser,
mapping=aes(fill=thresh_probability),
show.legend=TRUE,
hemi = "right") + scale_fill_gradientn(colors = aquamarine, na.value = "grey80", limits = c(0.3,1)) +
theme_void()
ggplot() + geom_brain(data=glasser_maps$ARCR, atlas= glasser,
mapping=aes(fill=thresh_probability, colour=thresh_probability, size=I(0.3)),
show.legend=TRUE,
hemi = "right") + scale_fill_gradientn(colors = aquamarine, na.value = "grey80", limits = c(0.3,1)) +
theme_void()
ggplot() + geom_brain(data=glasser_maps$ARCR, atlas= glasser,
mapping=aes(fill=thresh_probability),
show.legend=TRUE,
hemi = "right") + scale_fill_gradientn(colors = aquamarine, na.value = "grey80", limits = c(0.3,1)) +
theme_void()
ggplot() + geom_brain(data=glasser_maps$ARCR, atlas= glasser,
mapping=aes(fill=thresh_probability, colour=thresh_probability, size=I(0.3)),
show.legend=TRUE,
hemi = "right") + scale_fill_gradientn(colors = aquamarine, na.value = "grey80", limits = c(0.3,1)) +
theme_void()
ggplot() + geom_brain(data=glasser_maps$ARCR, atlas= glasser,
mapping=aes(fill=thresh_probability, size=I(0.3)),
show.legend=TRUE,
hemi = "right") +
scale_fill_gradientn(colors = aquamarine, na.value = "grey80", limits = c(0.3,1)) +
theme_void()
ggplot() + geom_brain(data=glasser_maps$ARCR, atlas= glasser,
mapping=aes(fill=thresh_probability),
show.legend=TRUE,
hemi = "right") + scale_fill_gradientn(colors = aquamarine, na.value = "grey80", limits = c(0.3,1)) +
theme_void()
ggplot() + geom_brain(data=glasser_maps$ARCR, atlas= glasser,
mapping=aes(fill=thresh_probability),
show.legend=TRUE,
hemi = "right") + scale_fill_gradientn(colors = aquamarine, na.value = "grey88", limits = c(0.3,1)) +
theme_void()
glasser_maps
ggplot() + geom_brain(data=glasser_maps$ARCR, atlas= glasser,
mapping=aes(fill=thresh_probability),
show.legend=TRUE,
hemi = "right") + scale_fill_gradientn(colors = aquamarine, na.value = "grey88", limits = c(0.3,1)) +
theme_void() +
labs(title="Arcuate Fasciculus") +
guides(color=FALSE) +
theme(legend.position = "bottom",
legend.key.height = unit(1, 'cm'),
legend.key.width = unit(2.3, 'cm'),
legend.margin=margin(10,0,0,0),
legend.text = element_text(size=24),
legend.title = element_blank(),
plot.title = element_text(size=20, hjust = 0.5))
ggplot() + geom_brain(data=glasser_maps$ARCR, atlas= glasser,
mapping=aes(fill=thresh_probability),
show.legend=TRUE,
hemi = "right") + scale_fill_gradientn(colors = aquamarine, na.value = "grey88", limits = c(0.3,1)) +
theme_void() +
guides(color=FALSE) +
theme(legend.position = "none",
plot.title = element_text(size=20, hjust = 0.5))
ggplot() + geom_brain(data=glasser_maps$ARCR, atlas= glasser,
mapping=aes(fill=thresh_probability),
show.legend=TRUE,
hemi = "right") + scale_fill_gradientn(colors = aquamarine, na.value = "grey88", limits = c(0.3,1)) +
theme_void() +
guides(color=FALSE) +
theme(legend.position = "none",
plot.margin = unit(c(0.2, 0.2, 0.2, -1), "cm"),
plot.title = element_text(size=20, hjust = 0.5))
ggplot() + geom_brain(data=glasser_maps$ARCR, atlas= glasser,
mapping=aes(fill=thresh_probability),
show.legend=TRUE,
hemi = "right") + scale_fill_gradientn(colors = aquamarine, na.value = "grey88", limits = c(0.3,1)) +
theme_void() +
guides(color=FALSE) +
theme(legend.position = "bottom",
plot.margin = unit(c(0.2, 0.2, 0.2, -1), "cm"),
plot.title = element_text(size=20, hjust = 0.5))
ggplot() + geom_brain(data=glasser_maps$ARCR, atlas= glasser,
mapping=aes(fill=thresh_probability),
show.legend=TRUE,
hemi = "right") + scale_fill_gradientn(colors = aquamarine, na.value = "grey88", limits = c(0.3,1)) +
theme_void() +
guides(color=FALSE) +
theme(legend.position = "top",
plot.margin = unit(c(0.2, 0.2, 0.2, -1), "cm"),
plot.title = element_text(size=20, hjust = 0.5))
ggplot() + geom_brain(data=glasser_maps$ARCR, atlas= glasser,
mapping=aes(fill=thresh_probability),
show.legend=TRUE,
hemi = "right") + scale_fill_gradientn(colors = aquamarine, na.value = "grey88", limits = c(0.3,1)) +
theme_void() +
guides(color=FALSE) +
theme(legend.position = "right",
plot.margin = unit(c(0.2, 0.2, 0.2, -1), "cm"),
plot.title = element_text(size=20, hjust = 0.5))
ggplot() + geom_brain(data=glasser_maps$ARCR, atlas= glasser,
mapping=aes(fill=thresh_probability),
show.legend=TRUE,
hemi = "right") + scale_fill_gradientn(colors = aquamarine, na.value = "grey88", limits = c(0.3,1)) +
theme_void() +
guides(color=FALSE) +
theme(legend.position = "left",
plot.margin = unit(c(0.2, 0.2, 0.2, -1), "cm"),
plot.title = element_text(size=20, hjust = 0.5))
ggplot() + geom_brain(data=glasser_maps$ARCR, atlas= glasser,
mapping=aes(fill=thresh_probability),
show.legend=TRUE,
hemi = "right") + scale_fill_gradientn(colors = aquamarine, na.value = "grey88", limits = c(0.3,1)) +
theme_void() +
guides(color=FALSE) +
theme(legend.position = "left",
plot.margin = unit(c(0.2, 0.2, 0.2, 0.2), "cm"),
plot.title = element_text(size=20, hjust = 0.5))
ggplot() + geom_brain(data=glasser_maps$ARCR, atlas= glasser,
mapping=aes(fill=thresh_probability),
show.legend=TRUE,
hemi = "right") + scale_fill_gradientn(colors = aquamarine, na.value = "grey88", limits = c(0.3,1)) +
theme_void() +
guides(color=FALSE) +
theme(legend.position = "none",
plot.margin = unit(c(0.2, 0.2, 0.2, 0.2), "cm"),
plot.title = element_text(size=20, hjust = 0.5))
# separate lh and rh maps
left_idx <- grep("L$", names(glasser_maps))
left_idx
# Create a new list with only the data frames ending with 'L'
lh_maps <- glasser_maps[left_idx]
lh_maps$ARCL
lh_idx <- grep("L$", names(glasser_maps))
lh_maps <- glasser_maps[lh_idx]
rh_idx <- grep("R$", names(glasser_maps))
rh_maps <- glasser_maps[rh_idx]
rh_maps
plot_maps <- function(map, hemi, threshold) {
map <- map %>% mutate(thresh_probability = ifelse(probability < threshold, NA, probability))
plot <- ggplot() + geom_brain(data = map, atlas= glasser,
mapping=aes(fill=thresh_probability),
show.legend=TRUE,
hemi = get(hemi)) +
scale_fill_gradientn(colors = aquamarine, na.value = "grey88", limits = c(threshold, 1)) +
guides(color=FALSE) +
theme(legend.position = "none",
plot.margin = unit(c(0.2, 0.2, 0.2, 0.2), "cm"),
plot.title = element_text(size=20, hjust = 0.5)) +
theme_void()
return(plot)
}
plot_maps(rh_maps$ATRR, "right", threshold)
threshold = 0.3
plot_maps(rh_maps$ATRR, "right", threshold)
plot_maps <- function(map, hemi, threshold) {
map <- map %>% mutate(thresh_probability = ifelse(probability < threshold, NA, probability))
plot <- ggplot() + geom_brain(data = map, atlas= glasser,
mapping=aes(fill=thresh_probability),
show.legend=TRUE,
hemi = hemi) +
scale_fill_gradientn(colors = aquamarine, na.value = "grey88", limits = c(threshold, 1)) +
guides(color=FALSE) +
theme(legend.position = "none",
plot.margin = unit(c(0.2, 0.2, 0.2, 0.2), "cm"),
plot.title = element_text(size=20, hjust = 0.5)) +
theme_void()
return(plot)
}
plot_maps(rh_maps$ATRR, "right", threshold)
plot_maps <- function(map, hemi, threshold) {
map <- map %>% mutate(thresh_probability = ifelse(probability < threshold, NA, probability))
plot <- ggplot() + geom_brain(data = map, atlas= glasser,
mapping=aes(fill=thresh_probability),
show.legend=TRUE,
hemi = hemi) +
scale_fill_gradientn(colors = aquamarine, na.value = "grey88", limits = c(threshold, 1)) +
theme(legend.position = "none",
plot.margin = unit(c(0.2, 0.2, 0.2, 0.2), "cm"),
plot.title = element_text(size=20, hjust = 0.5)) +
theme_void()
return(plot)
}
threshold = 0.3
plot_maps(rh_maps$ATRR, "right", threshold)
plot_maps <- function(map, hemi, threshold) {
map <- map %>% mutate(thresh_probability = ifelse(probability < threshold, NA, probability))
plot <- ggplot() + geom_brain(data = map, atlas= glasser,
mapping=aes(fill=thresh_probability),
show.legend=TRUE,
hemi = hemi) +
scale_fill_gradientn(colors = aquamarine, na.value = "grey88", limits = c(threshold, 1)) +  theme_void() +
theme(legend.position = "none",
plot.margin = unit(c(0.2, 0.2, 0.2, 0.2), "cm"),
plot.title = element_text(size=20, hjust = 0.5))
return(plot)
}
threshold = 0.3
plot_maps(rh_maps$ATRR, "right", threshold)
lh_plots <- lapply(lh_maps, plot_maps, hemi = "left", threshold = threshold)
rh_plots <- lapply(rh_maps, plot_maps, hemi = "right", threshold = threshold)
lh_plots
rh_plots
