dataset="HBN"
library(ComBatFamily)
library(data.table)
library(dplyr)
library(mgcv)
library(rjson)
library(stringr)
library(tidyr)
config_data <- fromJSON(file=sprintf("/cbica/projects/luo_wm_dev/code/tract_profiles/config/config_%1$s.json", dataset))
demographics <- read.csv(config_data$demographics_file)
data_root <- config_data$tract_profiles_data_root
all_subjects <- fread(sprintf("%1$s/all_subjects/collated_tract_profiles.tsv", data_root))
# df needs to have subjectID as rows and tract_node as columns.
all_subjects <- all_subjects %>%
mutate(
hemi = ifelse(grepl("_L", tractID), "Left", "Right"),
tractID = gsub("_[LR]", "", tractID),
tractID = case_when(
tractID == "ATR" ~ "Anterior Thalamic Radiation",
tractID == "CGC" ~ "Cingulum Cingulate",
tractID == "CST" ~ "Corticospinal Tract",
tractID == "IFO" ~ "Inferior Fronto-occipital Fasciculus",
tractID == "ILF" ~ "Inferior Longitudinal Fasciculus",
tractID == "SLF" ~ "Superior Longitudinal Fasciculus",
tractID == "ARC" ~ "Arcuate Fasciculus",
tractID == "UNC" ~ "Uncinate Fasciculus",
tractID == "FA" ~ "Forceps Minor",
tractID == "FP" ~ "Forceps Major",
tractID == "pARC" ~ "Posterior Arcuate",
tractID == "VOF" ~ "Vertical Occipital Fasciculus",
TRUE ~ tractID
),
tract_hemi = paste(hemi, tractID),
tract_hemi = gsub("Right Forceps", "Forceps", tract_hemi),
tract_hemi = str_replace_all(tract_hemi, " ", "_")
)
all_subjects$hemi[all_subjects$tract_hemi == "Forceps_Minor" | all_subjects$tract_hemi == "Forceps_Major"] <- NA
all_subjects$subjectID <- as.factor(all_subjects$subjectID)
all_subjects <- all_subjects %>% mutate(tract_node = paste0(tract_hemi, "_", nodeID))
md <- all_subjects %>% select(subjectID, dti_md, tract_node)
md_wide <- md %>% pivot_wider(names_from = "tract_node", values_from = "dti_md")
md_wide <- data.frame(md_wide)
fa <- all_subjects %>% select(subjectID, dti_fa, tract_node)
fa_wide <- fa %>% pivot_wider(names_from = "tract_node", values_from = "dti_fa")
fa_wide <- data.frame(fa_wide)
# set rownames = subjectID; remove subjectID column
row.names(md_wide) <- md_wide$subjectID
md_to_harmonize <- md_wide %>% select(-subjectID)
row.names(fa_wide) <- fa_wide$subjectID
fa_to_harmonize <- fa_wide %>% select(-subjectID)
knitr::opts_chunk$set(echo = TRUE)
md_wide
# reorder demographics to match md_wide and fa_wide
demographics1 <- merge(md_wide[,c(1,2)], demographics, by="subjectID")
md_wide[,c(1,2)]
names(demographics)
# reorder demographics to match md_wide and fa_wide
demographics <- demographics %>% rename(subjectID=sub)
demographics1 <- merge(md_wide[,c(1,2)], demographics, by="subjectID")
knitr::opts_chunk$set(echo = TRUE)
demographics1
demographics <- merge(md_wide[,c(1,2)], demographics, by="subjectID")
demographics <- demographics %>% select(subjectID, age, sex, race, site
)
demographics
names(demographics)
identical(demographics$subjectID, rownames(fa_to_harmonize))
cbind(demographics$subjectID, rownames(fa_to_harmonize)
)
demographics <- read.csv(config_data$demographics_file)
# reorder demographics to match md_wide and fa_wide
demographics <- demographics %>% rename(subjectID=sub)
demographics$subjectID
demographics <- merge(md_wide[,c(1,2)], demographics, by="subjectID")
demographics$subjectID
demographics %>% select(subjectID, age, sex, race, site)
demographics <- demographics %>% select(subjectID, age, sex, race, site)
identical(demographics$subjectID, rownames(fa_to_harmonize))
demographics$subjectID
rownames(fa_to_harmonize)
cbind(rownames(fa_to_harmonize), demographics$subjectID)
demographics$subjectID
rownames(fa_to_harmonize)
identical(c(rownames(fa_to_harmonize)), demographics$subjectID)
cbind(c(rownames(fa_to_harmonize)), demographics$subjectID)
demographics
demographics
rownames(fa_to_harmonize)
identical(demographics$subjectID, fa_wide$subjectID)
cbind(demographics$subjectID, fa_wide$subjectID)
fa_wide$subjectID
demographics$subjectID
demographics <- read.csv(config_data$demographics_file)
demographics <- demographics %>% rename(subjectID=sub)
left_join(md_wide[,c(1,2)], demographics, by="subjectID")
md_wide
demographics <- left_join(md_wide[,c(1,2)], demographics, by="subjectID")
demographics <- demographics %>% select(subjectID, age, sex, race, site)
identical(demographics$subjectID, rownames(fa_to_harmonize))
config_data
qc_file <- read.csv(config_data$qc_file)
qc_file
identical(demographics$subjectID, qc_file$sub)
setdiff(demographics$subjectID, qc_file$sub)
setdiff(qc_file$sub, demographics$subjectID)
demographics <- merge(demographics, qc_file, by = "sub")
demographics <- read.csv(config_data$demographics_file)
qc_file <- read.csv(config_data$qc_file)
demographics <- merge(demographics, qc_file, by = "sub")
demographics <- demographics %>% rename(subjectID=sub)
demographics <- left_join(md_wide[,c(1,2)], demographics, by="subjectID")
demographics <- demographics %>% select(subjectID, age, sex, race, site)
age_vec <- demographics$age
sex_vec <- as.factor(demographics$sex)
demographics$mean_fd
demographics <- read.csv(config_data$demographics_file)
qc_file <- read.csv(config_data$qc_file)
demographics <- merge(demographics, qc_file, by = "sub")
demographics <- demographics %>% rename(subjectID=sub)
demographics <- left_join(md_wide[,c(1,2)], demographics, by="subjectID")
demographics <- demographics %>% select(subjectID, age, sex, race, site, mean_fd)
demographics$mean_fd
identical(demographics$subjectID, rownames(md_wide))
covar_df <- bind_cols(demographics$subjectID, as.numeric(age_vec), as.factor(sex_vec), as.numeric(meanFD_avgSes_vec))
age_vec <- demographics$age
sex_vec <- as.factor(demographics$sex)
mean_fd_vec <- demographics$mean_fd
covar_df <- bind_cols(demographics$subjectID, as.numeric(age_vec), as.factor(sex_vec), as.numeric(mean_fd_vec))
covar_df
covar_df <- dplyr::rename(covar_df, subjectID=...1,
age = ...2,
sex = ...3,
mean_fd = ...4)
covar_df
list(md_to_harmonize)
list(md_to_harmonize)[1]
library(ComBatFamily)
library(dplyr)
library(mgcv)
atlases_GBC <- c("schaefer200") # only doing schaefer200 for manuscript
atlases <- c("schaefer200x7")
dataset <- "HBN"
participants <- read.csv("/cbica/projects/network_replication/input/HBN/sample_selection/HBN_demographics_finalsample.csv")
#GBC
metric = "GBC"
for(i in c(1:length(atlases_GBC))){
df_name <- paste0(metric, "_", "subxparcel_", atlases_GBC[i])
assign(df_name, read.csv(sprintf("/cbica/projects/network_replication/manuscript/output/%1$s/%2$s/%2$s_subxparcel_matrix_%3$s.csv", dataset, metric, atlases_GBC[i])))
assign(df_name, data.frame(get(df_name)[,-1])) # remove subject column
print(df_name)
}
row.names(GBC_subxparcel_schaefer200) <- participants$sub
demographics$site
list(GBC_subxparcel_schaefer200)
data.harmonized_md <- covfam(md_to_harmonize[1,], bat = as.factor(demographics$site), covar = covar_df, gam, y ~ s(age, k=3, fx=T) + as.factor(sex) + as.numeric(mean_fd))
covar_df[1,]
fa_to_harmonize[1,]
rownames(fa_to_harmonize)[1]
covar_df[1,]
data.harmonized_fa <- covfam(fa_to_harmonize[1,], bat = as.factor(demographics$site[1]), covar = covar_df[1,], gam, y ~ s(age, k=3, fx=T) + as.factor(sex) + as.numeric(mean_fd))
age_vec <- demographics$age[c(1:2)]
sex_vec <- as.factor(demographics$sex[c(1:2)])
mean_fd_vec <- demographics$mean_fd[c(1:2)]
covar_df <- bind_cols(demographics$subjectID, as.numeric(age_vec), as.factor(sex_vec), as.numeric(mean_fd_vec))
covar_df <- bind_cols(demographics$subjectID[c(1:2)] , as.numeric(age_vec), as.factor(sex_vec), as.numeric(mean_fd_vec))
covar_df <- dplyr::rename(covar_df, subjectID=...1,
age = ...2,
sex = ...3,
mean_fd = ...4)
covar_df
covar_df
fa_to_harmonize[c(1:2),]
data.harmonized_fa <- covfam(fa_to_harmonize[c(1:2),], bat = as.factor(demographics$site[c(1:2)]), covar = covar_df, gam, y ~ s(age, k=3, fx=T) + as.factor(sex) + as.numeric(mean_fd))
age_vec <- demographics$age[c(1:10)]
sex_vec <- as.factor(demographics$sex[c(1:10)])
mean_fd_vec <- demographics$mean_fd[c(1:10)]
covar_df <- bind_cols(demographics$subjectID[c(1:10)] , as.numeric(age_vec), as.factor(sex_vec), as.numeric(mean_fd_vec))
covar_df <- dplyr::rename(covar_df, subjectID=...1,
age = ...10,
sex = ...3,
mean_fd = ...4)
covar_df
age_vec <- demographics$age[c(1:10)]
sex_vec <- as.factor(demographics$sex[c(1:10)])
mean_fd_vec <- demographics$mean_fd[c(1:10)]
covar_df <- bind_cols(demographics$subjectID[c(1:10)], as.numeric(age_vec), as.factor(sex_vec), as.numeric(mean_fd_vec))
covar_df <- dplyr::rename(covar_df, subjectID=...1,
age = ...10,
sex = ...3,
mean_fd = ...4)
age_vec <- demographics$age[c(1:10)]
sex_vec <- as.factor(demographics$sex[c(1:10)])
mean_fd_vec <- demographics$mean_fd[c(1:10)]
covar_df <- bind_cols(demographics$subjectID[c(1:10)], as.numeric(age_vec), as.factor(sex_vec), as.numeric(mean_fd_vec))
covar_df
covar_df <- dplyr::rename(covar_df, subjectID=...1,
age = ...10,
sex = ...3,
mean_fd = ...4)
covar_df <- dplyr::rename(covar_df, subjectID=...1,
age = ...2,
sex = ...3,
mean_fd = ...4)
covar_df
fa_to_harmonize[c(1:10),c(1:10)]
data.harmonized_fa <- covfam(fa_to_harmonize[c(1:10),c(1:10)], bat = as.factor(demographics$site[c(1:10)]), covar = covar_df, gam, y ~ s(age, k=3, fx=T) + as.factor(sex) + as.numeric(mean_fd))
demographics$site[c(1:10)]
knitr::opts_chunk$set(echo = TRUE)
test <- readRDS("/cbica/projects/luo_wm_dev/input/HBN/HBN_tractprofiles/all_subjects/collated_tract_profiles_md_covbat.RData ")
test <- readRDS("/cbica/projects/luo_wm_dev/input/HBN/HBN_tractprofiles/all_subjects/collated_tract_profiles_md_covbat.RData")
test
md_to_harmonize
cor.test(md_to_harmonize$Left_Anterior_Thalamic_Radiation_0, test$Left_Anterior_Thalamic_Radiation_0)
cor.test(md_to_harmonize$Left_Anterior_Thalamic_Radiation_10, test$Left_Anterior_Thalamic_Radiation_10)
dataset="HCPD"
config_data <- fromJSON(file=sprintf("/cbica/projects/luo_wm_dev/code/tract_profiles/config/config_%1$s.json", dataset))
demographics <- read.csv(config_data$demographics_file)
qc_file <- read.csv(config_data$qc_file)
demographics <- merge(demographics, qc_file, by = "sub")
names(demographics)
demographics$site
names(demographics)
data_root <- config_data$tract_profiles_data_root
data_root
demographics$age
as.factor(demographics$sex)
demographics$mean_fd
demographics$subjectID
demographics <- demographics %>% rename(subjectID=sub)
emographics$subjectID
demographics$subjectID
as.factor(sex_vec)
as.factor(demographics$sex)
sex_vec
sex_vec <- as.factor(demographics$sex)
as.factor(sex_vec)
as.numeric(mean_fd_vec)
mean_fd_vec <- demographics$mean_fd
covar_df <- bind_cols(demographics$subjectID, as.numeric(age_vec), as.factor(sex_vec), as.numeric(mean_fd_vec))
age_vec <- demographics$age
sex_vec <- as.factor(demographics$sex)
mean_fd_vec <- demographics$mean_fd
covar_df <- bind_cols(demographics$subjectID, as.numeric(age_vec), as.factor(sex_vec), as.numeric(mean_fd_vec))
covar_df <- dplyr::rename(covar_df, subjectID=...1,
age = ...2,
sex = ...3,
mean_fd = ...4)
covar_df
